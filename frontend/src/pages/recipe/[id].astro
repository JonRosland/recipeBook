---
import Layout from "../../layouts/Layout.astro";
import RecipeHeader from "../../components/RecipeHeader.svelte";
import RecipeNotes from "../../components/RecipeNotes.svelte";
import RecipeIngredients from "../../components/RecipeIngredients.svelte";
import RecipeSteps from "../../components/RecipeSteps.svelte";
import RecipeInfoDisplay from "../../components/RecipeInfoDisplay.svelte";
import { getRecipeApi } from "../../components/APIFunctions.js";

// Get recipe ID from URL
const { id } = Astro.params;
let recipe = null;
let errorMessage = null;

try {
  // Log the API call for debugging
  console.log(`Fetching recipe with ID: ${id}`);
  
  // Fetch recipe data with error handling
  recipe = await getRecipeApi(id).catch((error) => {
    console.error(`Error fetching recipe ${id}:`, error);
    errorMessage = `Error: ${error.message || "Failed to fetch recipe"}`;
    return null;
  });

  // Log whether we got a recipe
  if (recipe) {
    console.log(`Recipe fetch successful:`, recipe);
  } else {
    console.log(`Recipe fetch failed`);
  }
} catch (error) {
  console.error(`Unexpected error fetching recipe ${id}:`, error);
  errorMessage = `Unexpected error: ${error.message}`;
}

// Only redirect if we need to (no recipe and no error)
if (!recipe && !errorMessage) {
  return Astro.redirect("/");
}

// Handle recipe data mapping - if recipeName is missing but title exists
if (recipe && !recipe.recipeName && recipe.title) {
  recipe.recipeName = recipe.title;
}

// Check if we're on desktop (will be replaced client-side)
const isDesktop = false;
---

<Layout title={recipe ? (recipe.recipeName || "Recipe") : "Recipe Error"}>
  <div class="container">
    {errorMessage ? (
      <div class="error-container">
        <h1 class="error-title">Kunne ikke hente oppskrift</h1>
        <p class="error-message">{errorMessage}</p>
        <a href="/" class="back-button">Tilbake til oppskrifter</a>
      </div>
    ) : (
      <div class="recipe-view-layout">
        <!-- Recipe Header (different on desktop vs mobile) -->
        <div class="recipe-header-container">
          <RecipeHeader
            client:load
            title={recipe.recipeName || recipe.title || "Uten navn"}
            origin={recipe.origin}
            recipeId={id}
            favorite={recipe.favorite || false}
            isDesktopView={false} <!-- Will be set client-side -->
          />
        </div>

        <!-- First row on desktop: Info and Notes -->
        <div class="recipe-row info-notes-row">
          <div class="recipe-info-container">
            <RecipeInfoDisplay client:load recipe={recipe} />
          </div>
          
          <div class="recipe-notes-container">
            <RecipeNotes client:load notes={recipe.notes} />
          </div>
        </div>
        
        <!-- Second row on desktop: Ingredients and Steps -->
        <div class="recipe-row ingredients-steps-row">
          <div class="recipe-ingredients-container">
            <RecipeIngredients
              client:load
              ingredients={recipe.ingredients || []}
              defaultPortion={recipe.portion || 1}
            />
          </div>
          
          <div class="recipe-steps-container">
            <RecipeSteps client:load steps={recipe.steps || []} />
          </div>
        </div>
      </div>
    )}
  </div>
</Layout>

<script>
  // Update layout based on screen size
  function adjustLayout() {
    const isDesktop = window.innerWidth >= 1024;
    document.documentElement.classList.toggle('recipe-desktop-view', isDesktop);
    
    // Try to update the RecipeHeader component's isDesktopView prop
    const headerComponent = document.querySelector('recipe-header');
    if (headerComponent && typeof headerComponent.updateDesktopState === 'function') {
      headerComponent.updateDesktopState(isDesktop);
    }
  }
  
  // Run on load and resize
  window.addEventListener('load', adjustLayout);
  window.addEventListener('resize', adjustLayout);
</script>

<style>
  .container {
    max-width: 640px;
    margin: 0 auto;
    padding: var(--spacing-lg);
  }
  
  .recipe-view-layout {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-lg);
  }
  
  .error-container {
    text-align: center;
    padding: 2rem;
    border-radius: 8px;
    background-color: #fff8f8;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }
  
  .error-title {
    color: #e74c3c;
    margin-bottom: 1rem;
  }
  
  .error-message {
    margin-bottom: 2rem;
    color: #333;
    font-size: 1.1rem;
  }
  
  .back-button {
    display: inline-block;
    padding: 0.5rem 1rem;
    background-color: var(--primary-color);
    color: var(--text-on-primary);
    text-decoration: none;
    border-radius: 4px;
    font-weight: 500;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }
  
  .back-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  /* Desktop layout */
  @media (min-width: 1024px) {
    .container {
      max-width: 1200px;
    }
    
    .recipe-row {
      display: grid;
      gap: var(--spacing-xl);
    }
    
    .info-notes-row {
      grid-template-columns: 1fr 1fr;
      margin-bottom: var(--spacing-xl);
    }
    
    .ingredients-steps-row {
      grid-template-columns: 1fr 2fr;
    }
    
    .recipe-info-container,
    .recipe-notes-container,
    .recipe-ingredients-container,
    .recipe-steps-container {
      height: 100%;
    }
    
    /* Hide origin in header for desktop */
    :global(html.recipe-desktop-view) .header-origin {
      display: none;
    }
  }
</style>